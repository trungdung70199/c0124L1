{
  "version": 3,
  "sources": ["../../@radix-ui/react-progress/dist/packages/react/progress/src/index.ts", "../../@radix-ui/react-progress/dist/packages/react/progress/src/Progress.tsx"],
  "sourcesContent": ["export {\n  createProgressScope,\n  //\n  Progress,\n  ProgressIndicator,\n  //\n  Root,\n  Indicator,\n} from './Progress';\nexport type { ProgressProps, ProgressIndicatorProps } from './Progress';\n", "import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Progress\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROGRESS_NAME = 'Progress';\nconst DEFAULT_MAX = 100;\n\ntype ScopedProps<P> = P & { __scopeProgress?: Scope };\nconst [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\n\ntype ProgressState = 'indeterminate' | 'complete' | 'loading';\ntype ProgressContextValue = { value: number | null; max: number };\nconst [ProgressProvider, useProgressContext] =\n  createProgressContext<ProgressContextValue>(PROGRESS_NAME);\n\ntype ProgressElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface ProgressProps extends PrimitiveDivProps {\n  value?: number | null | undefined;\n  max?: number;\n  getValueLabel?(value: number, max: number): string;\n}\n\nconst Progress = React.forwardRef<ProgressElement, ProgressProps>(\n  (props: ScopedProps<ProgressProps>, forwardedRef) => {\n    const {\n      __scopeProgress,\n      value: valueProp,\n      max: maxProp,\n      getValueLabel = defaultGetValueLabel,\n      ...progressProps\n    } = props;\n\n    const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n    const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n    const valueLabel = isNumber(value) ? getValueLabel(value, max) : undefined;\n\n    return (\n      <ProgressProvider scope={__scopeProgress} value={value} max={max}>\n        <Primitive.div\n          aria-valuemax={max}\n          aria-valuemin={0}\n          aria-valuenow={isNumber(value) ? value : undefined}\n          aria-valuetext={valueLabel}\n          role=\"progressbar\"\n          data-state={getProgressState(value, max)}\n          data-value={value ?? undefined}\n          data-max={max}\n          {...progressProps}\n          ref={forwardedRef}\n        />\n      </ProgressProvider>\n    );\n  }\n);\n\nProgress.displayName = PROGRESS_NAME;\n\nProgress.propTypes = {\n  max(props, propName, componentName) {\n    const propValue = props[propName];\n    const strVal = String(propValue);\n    if (propValue && !isValidMaxNumber(propValue)) {\n      return new Error(getInvalidMaxError(strVal, componentName));\n    }\n    return null;\n  },\n  value(props, propName, componentName) {\n    const valueProp = props[propName];\n    const strVal = String(valueProp);\n    const max = isValidMaxNumber(props.max) ? props.max : DEFAULT_MAX;\n    if (valueProp != null && !isValidValueNumber(valueProp, max)) {\n      return new Error(getInvalidValueError(strVal, componentName));\n    }\n    return null;\n  },\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProgressIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'ProgressIndicator';\n\ntype ProgressIndicatorElement = React.ElementRef<typeof Primitive.div>;\ninterface ProgressIndicatorProps extends PrimitiveDivProps {}\n\nconst ProgressIndicator = React.forwardRef<ProgressIndicatorElement, ProgressIndicatorProps>(\n  (props: ScopedProps<ProgressIndicatorProps>, forwardedRef) => {\n    const { __scopeProgress, ...indicatorProps } = props;\n    const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n    return (\n      <Primitive.div\n        data-state={getProgressState(context.value, context.max)}\n        data-value={context.value ?? undefined}\n        data-max={context.max}\n        {...indicatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nProgressIndicator.displayName = INDICATOR_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\nfunction defaultGetValueLabel(value: number, max: number) {\n  return `${Math.round((value / max) * 100)}%`;\n}\n\nfunction getProgressState(value: number | undefined | null, maxValue: number): ProgressState {\n  return value == null ? 'indeterminate' : value === maxValue ? 'complete' : 'loading';\n}\n\nfunction isNumber(value: any): value is number {\n  return typeof value === 'number';\n}\n\nfunction isValidMaxNumber(max: any): max is number {\n  // prettier-ignore\n  return (\n    isNumber(max) &&\n    !isNaN(max) &&\n    max > 0\n  );\n}\n\nfunction isValidValueNumber(value: any, max: number): value is number {\n  // prettier-ignore\n  return (\n    isNumber(value) &&\n    !isNaN(value) &&\n    value <= max &&\n    value >= 0\n  );\n}\n\n// Split this out for clearer readability of the error message.\nfunction getInvalidMaxError(propValue: string, componentName: string) {\n  return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${DEFAULT_MAX}\\`.`;\n}\n\nfunction getInvalidValueError(propValue: string, componentName: string) {\n  return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\n\nconst Root = Progress;\nconst Indicator = ProgressIndicator;\n\nexport {\n  createProgressScope,\n  //\n  Progress,\n  ProgressIndicator,\n  //\n  Root,\n  Indicator,\n};\nexport type { ProgressProps, ProgressIndicatorProps };\n"],
  "mappings": "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",
  "names": ["PROGRESS_NAME", "DEFAULT_MAX", "createProgressContext", "createProgressScope", "createContextScope", "ProgressProvider", "useProgressContext", "Progress", "React", "props", "forwardedRef", "value", "valueProp", "max", "maxProp", "defaultGetValueLabel", "progressProps", "isValidMaxNumber", "isValidValueNumber", "valueLabel", "isNumber", "getValueLabel", "undefined", "$k03wI$createElement", "__scopeProgress", "getProgressState", "propTypes", "propName", "componentName", "propValue", "strVal", "String", "Error", "getInvalidMaxError", "getInvalidValueError", "INDICATOR_NAME", "ProgressIndicator", "indicatorProps", "context", "Math", "round", "maxValue", "isNaN", "Root", "Indicator"]
}
